{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template for web resources",
    "Parameters": {
        "NetworkStackNameParameter": {
            "Description": "Stack name to import network resource parameters from",
            "Type": "String",
            "MinLength": "1",
            "AllowedPattern": "[a-zA-Z]*",
            "ConstraintDescription": "must contain only letters."
        },
        "BastionServerName": {
            "Description": "Bastion Server Name",
            "Type": "String",
            "Default": "bastion"
        },
        "EmailAddress": {
            "Description": "Email to where notifications will be sent",
            "Type": "String",
            "Default": "askar.aitzhan@gmail.com"
        },
        "SNSDisplayNameInfra": {
            "Default": "InfraAlert",
            "Description": "The SNS display name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "10",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "SNSTopicNameInfra": {
            "Default": "SapiensInfra",
            "Description": "The SNS topic name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "15",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBName": {
            "Default": "algordb",
            "Description": "The database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBbackupRetentionPeriod": {
            "Default": "7",
            "Description": "Database Backup Retention Period",
            "Type": "Number",
            "MinValue": "0",
            "MaxValue": "30",
            "ConstraintDescription": "must be between 0 and 30"
        },
        "DBUser": {
            "Default": "algordbroot",
            "NoEcho": "true",
            "Description": "The database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "Default": "2rmEAZarLM4rmEH",
            "NoEcho": "true",
            "Description": "The database admin account password",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]+",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },
        "EC2InstanceASG": {
            "Description": "The EC2 instance type for ASG",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge"
            ],
            "ConstraintDescription": "must select a valid EC2 instance type."
        },
        "EC2InstanceClassNAT": {
            "Description": "The EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge"
            ],
            "ConstraintDescription": "must select a valid EC2 instance type."
        },
        "EC2InstanceClassBastion": {
            "Description": "The Bastion EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "ConstraintDescription": "must select a valid EC2 Bastion instance type."
        },
        "DBInstanceClass": {
            "Description": "The database instance type",
            "Type": "String",
            "Default": "db.t2.micro",
            "AllowedValues": [
                "db.m2.xlarge",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium"
            ],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "MultiAZ": {
            "Description": "Multi-AZ master database",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must be true or false."
        },
        "KeyPairName": {
            "Description": "Name of an existing EC2 KeyPair , by default using one created in chapter 3 , under Creating EC2 instance key pairs",
            "NoEcho": "true",
            "MinLength": "1",
            "MaxLength": "64",
            "Default": "frankfurt-macbook-askar",
            "Type": "String",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
        },
        "ServerAccess": {
            "Description": "CIDR IP range allowed to login to the NAT instance",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "AMIImageId": {
            "Description": "Use your own ImageId for LaunchConfig, by default using a default image id from us-east-1 region ",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "25",
            "Default": "ami-03dbe87524bca3d93",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "Must be a valid imageID, use the one created under AMI Creation in chapter 4."
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.31.0.0/16",
                "AZ": "eu-central-1a"
            },
            "Public": {
                "CIDR": "10.31.16.0/20",
                "AZ": "eu-central-1a"
            },
            "Private": {
                "CIDR": "10.31.80.0/20",
                "AZ": "eu-central-1a"
            },
            "Bastion": {
                "CIDR": "10.31.96.0/20",
                "AZ": "eu-central-1a"
            },
            "HAPublic": {
                "CIDR": "10.31.48.0/20",
                "AZ": "eu-central-1c"
            },
            "DbPrivate": {
                "CIDR": "10.31.64.0/20",
                "AZ": "eu-central-1c"
            }
        },
        "RegionMapNat": {
            "us-east-1": {
                "AMI": "ami-303b1458"
            },
            "us-west-1": {
                "AMI": "ami-7da94839"
            },
            "us-west-2": {
                "AMI": "ami-69ae8259"
            },
            "eu-west-1": {
                "AMI": "ami-6975eb1e"
            },
            "eu-central-1": {
                "AMI": "ami-46073a5b"
            },
            "sa-east-1": {
                "AMI": "ami-fbfa41e6"
            },
            "ap-southeast-1": {
                "AMI": "ami-b49dace6"
            },
            "ap-southeast-2": {
                "AMI": "ami-e7ee9edd"
            },
            "ap-northeast-1": {
                "AMI": "ami-03cf3903"
            }
        },
        "RegionMap": {
            "us-east-1": {
                "AMI": "ami-d05e75b8"
            },
            "us-west-1": {
                "AMI": "ami-df6a8b9b"
            },
            "us-west-2": {
                "AMI": "ami-5189a661"
            },
            "eu-west-1": {
                "AMI": "ami-47a23a30"
            },
            "eu-central-1": {
                "AMI": "ami-accff2b1"
            },
            "sa-east-1": {
                "AMI": "ami-4d883350"
            },
            "ap-southeast-1": {
                "AMI": "ami-96f1c1c4"
            },
            "ap-southeast-2": {
                "AMI": "ami-69631053"
            },
            "ap-northeast-1": {
                "AMI": "ami-936d9d93"
            }
        }
    },
    "Resources": {

        "ELBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ELB Security Group",
                "VpcId": {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackNameParameter}::VPC"
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ELB Security Group"
                    }
                ]
            }
        },
        
        "EC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "EC2 Instances Security Group",
                "VpcId": {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackNameParameter}::VPC"
                    }
                },
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5432",
                        "ToPort": "5432",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EC2 Security Group"
                    }
                ]
            }
        },
        
        "BastionSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Bastion Security Group",
                "VpcId": {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackNameParameter}::VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "ServerAccess"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Bastion Security Group"
                    }
                ]
            }
        },
        
        "RDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "RDS Security Group",
                "VpcId": {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackNameParameter}::VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5432",
                        "ToPort": "5432",
                        "SourceSecurityGroupId":{
                            "Fn::GetAtt":[
                                "EC2SecurityGroup",
                                "GroupId"
                            ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5432",
                        "ToPort": "5432",
                        "SourceSecurityGroupId":{
                            "Fn::GetAtt":[
                                "BastionSecurityGroup",
                                "GroupId"
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "RDS Security Group"
                    }
                ]
            }
        },

        "ELBSecurityGroupIngress80": {
            "DependsOn": [
                "ELBSecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "ELBSecurityGroupIngress443": {
            "DependsOn": [
                "ELBSecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "443",
                "ToPort": "443",
                "CidrIp": "0.0.0.0/0"
            }
        },

        "ELBSecurityGroupEgress80": {
            "DependsOn": [
                "ELBSecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "DestinationSecurityGroupId":{
                    "Fn::GetAtt":[
                        "EC2SecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "ELBSecurityGroupEgress8000": {
            "DependsOn": [
                "ELBSecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "ELBSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "8000",
                "ToPort": "8000",
                "DestinationSecurityGroupId":{
                    "Fn::GetAtt":[
                        "EC2SecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        
        "EC2SecurityGroupIngress80": {
            "DependsOn": [
                "EC2SecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2SecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "80",
                "ToPort": "80",
                "SourceSecurityGroupId":{
                    "Fn::GetAtt":[
                        "ELBSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "EC2SecurityGroupIngress8000": {
            "DependsOn": [
                "EC2SecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2SecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "8000",
                "ToPort": "8000",
                "SourceSecurityGroupId":{
                    "Fn::GetAtt":[
                        "ELBSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "EC2SecurityGroupIngress22": {
            "DependsOn": [
                "EC2SecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2SecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "SourceSecurityGroupId":{
                    "Fn::GetAtt":[
                        "BastionSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "EC2SecurityGroupIngress9001": {
            "DependsOn": [
                "EC2SecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "EC2SecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "9001",
                "ToPort": "9001",
                "SourceSecurityGroupId":{
                    "Fn::GetAtt":[
                        "BastionSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "BastionSecurityGroupEgress5432": {
            "DependsOn": [
                "BastionSecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "BastionSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "5432",
                "ToPort": "5432",
                "DestinationSecurityGroupId":{
                    "Fn::GetAtt":[
                        "RDSSecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "BastionSecurityGroupEgress22": {
            "DependsOn": [
                "BastionSecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "BastionSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "DestinationSecurityGroupId":{
                    "Fn::GetAtt":[
                        "EC2SecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },
        "BastionSecurityGroupEgress9001": {
            "DependsOn": [
                "BastionSecurityGroup"
            ],
            "Type":"AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "BastionSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": "9001",
                "ToPort": "9001",
                "DestinationSecurityGroupId":{
                    "Fn::GetAtt":[
                        "EC2SecurityGroup",
                        "GroupId"
                    ]
                }
            }
        },

        "WebSecurityGroupPublic": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Public facing  Security Group",
                "VpcId": {
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackNameParameter}::VPC"
                    }
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5432",
                        "ToPort": "5432",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public WebSecurityGroup"
                    }
                ]
            }
        },

        "RootRole": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    }]
                },
                "Path": "/"
            }
        },

        "RootRolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "root",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "ec2:*",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "elasticloadbalancing:*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "cloudwatch:*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "autoscaling:*",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "iam:CreateServiceLinkedRole",
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "iam:AWSServiceName": [
                                        "autoscaling.amazonaws.com",
                                        "ec2scheduled.amazonaws.com",
                                        "elasticloadbalancing.amazonaws.com",
                                        "spot.amazonaws.com",
                                        "spotfleet.amazonaws.com",
                                        "transitgateway.amazonaws.com"
                                    ]
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:CreateAlias",
                                "kms:CreateKey",
                                "kms:Decrypt",
                                "kms:DeleteAlias",
                                "kms:Describe*",
                                "kms:Encrypt",
                                "kms:GenerateRandom",
                                "kms:Get*",
                                "kms:List*",
                                "kms:TagResource",
                                "kms:UntagResource",
                                "iam:ListGroups",
                                "iam:ListRoles",
                                "iam:ListUsers"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "RootRole"
                }]
            }
        },

        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [{
                    "Ref": "RootRole"
                }]
            }
        },

        "RDSSubnetGroup":{
            "Type":"AWS::RDS::DBSubnetGroup",
            "Properties":{
                "DBSubnetGroupDescription":"Availability Zones for AlgorDB",
                "SubnetIds":[
                    {
                        "Fn::ImportValue" : {
                            "Fn::Sub" : "${NetworkStackNameParameter}::PrivateSubnet"
                        }
                    },
                    {
                        "Fn::ImportValue" : {
                            "Fn::Sub" : "${NetworkStackNameParameter}::DbPrivateSubnet"
                        }
                    }
                ]
            }
        },

        "AlgorDB":{
            "Type":"AWS::RDS::DBInstance",
            "Properties":{
                "DBName":{
                    "Ref":"DBName"
                },
                "DBInstanceIdentifier":{
                    "Ref":"DBName"
                },
                "AllocatedStorage":{
                    "Ref":"DBAllocatedStorage"
                },
                "DBInstanceClass":{
                    "Ref":"DBInstanceClass"
                },
                "BackupRetentionPeriod":{
                    "Ref":"DBbackupRetentionPeriod"
                },
                "Engine":"postgres",
                "MasterUsername":{
                    "Ref":"DBUser"
                },
                "MasterUserPassword":{
                    "Ref":"DBPassword"
                },
                "MultiAZ":{
                    "Ref":"MultiAZ"
                },
                "Tags":[
                    {
                        "Key":"Name",
                        "Value":"Algor Master Database"
                    }
                ],
                "DBSubnetGroupName":{
                    "Ref":"RDSSubnetGroup"
                },
                "VPCSecurityGroups":[{
                    "Ref": "RDSSecurityGroup"
                }]

            },
            "DeletionPolicy": "Snapshot"
        },
        
        "BastionInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "EC2InstanceClassBastion"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "SourceDestCheck": "false",
                "ImageId": {
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "BastionSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Fn::ImportValue" : {
                                "Fn::Sub" : "${NetworkStackNameParameter}::PublicSubnet"
                            }
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Sapiens Bastion Instance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo In work\n"
                            ]
                        ]
                    }
                }
            }
        },

        "WebInstance": {
            "DependsOn": [
                "EC2SecurityGroup"
            ],
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": {
                    "Ref": "EC2InstanceASG"
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "SourceDestCheck": "false",
                "ImageId": {
                    "Ref": "AMIImageId"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "EC2SecurityGroup"
                            }
                        ],
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Fn::ImportValue" : {
                                "Fn::Sub" : "${NetworkStackNameParameter}::PrivateSubnet"
                            }
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Sapiens Web Instance"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo In work\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ElasticLoadBalancer":{
            "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties":{
                "Subnets":[{
                    "Fn::ImportValue" : {
                        "Fn::Sub" : "${NetworkStackNameParameter}::PublicSubnet"
                    }
                }],
                "CrossZone":"true",
                "Listeners":[
                    {
                        "LoadBalancerPort":"80",
                        "InstancePort":"80",
                        "Protocol":"HTTP"
                    },
                    {
                        "LoadBalancerPort":"443",
                        "InstancePort":"80",
                        "Protocol":"TCP"
                    }
                ],
                "ConnectionDrainingPolicy":{
                    "Enabled":"true",
                    "Timeout":"60"
                },
                "SecurityGroups" : [
                    {
                        "Ref" : "ELBSecurityGroup"
                    }
                ],
                "HealthCheck":{
                    "Target":"HTTP:8000/index.html",
                    "HealthyThreshold":"3",
                    "UnhealthyThreshold":"5",
                    "Interval":"30",
                    "Timeout":"5"
                },
                "Instances": [
                    {
                        "Ref": "WebInstance"
                    }
                ]
            }
        }
    },
    "Outputs": {
    }
}
